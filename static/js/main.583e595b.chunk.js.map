{"version":3,"sources":["modal.js","index.js"],"names":["modalRoot","document","getElementById","Modal","props","el","createElement","appendChild","this","removeChild","createPortal","children","React","Component","Token","color","shape","Step1","currentStep","className","Step2","Step3","Step4","PreviousButton","onClick","handlePrevious","NextButton","totalSteps","handleNext","Tutorial","showModal","handleHide","Square","tokenName","symbol","hints","hintShape","hintColor","legalMove","onDragOver","onDrop","Board","row","column","square","squares","targetKey","dropData","key","legalMoves","rows","gridSize","push","renderSquare","createSquares","Game","handleDragOver","e","preventDefault","handleMouseDown","console","log","state","blueIsNext","setState","handleMouseUp","handleHintsChange","event","value","target","checked","handleUndo","history","squaresHistory","length","slice","legalMovesHistory","handleNewGame","rowIndex","columnIndex","Array","from","fill","handleShow","bind","dragData","map","a","converseShape","converseColor","JSON","parse","stringify","currentRow","currentColumn","getElementsByTagName","style","setProperty","concat","updateBlackout","isEndgame","completeEndgame","score","calculateScore","redScore","red","blueScore","blue","handleDrop","onDragStart","onMouseDown","onMouseUp","name","type","onChange","calculateHorizontalScore","grid","scores","first","second","third","calculateVerticalScore","col","i","transposeDiagonalFromLeft","leftShift","prepend","append","parseInt","newRow","transposeDiagonalFromRight","rightShift","calculateDiagonalFromLeftScore","calculateDiagonalFromRightScore","horizontalScores","verticalScores","diagonalFromLeftScores","diagonalFromRightScores","anyLegal","alert","completed_squares","legal","token","ReactDOM","render"],"mappings":"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","file":"static/js/main.583e595b.chunk.js","sourcesContent":["// Modal.js\nimport React from 'react';\nimport { createPortal } from 'react-dom';\n// We get hold of the div with the id modal that we have created in index.html\nconst modalRoot = document.getElementById( 'modal' );\n\n\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        // Create a div that we'll render the modal into. Because each\n        // Modal component has its own element, we can render multiple\n        // modal components into the modal container.\n        this.el = document.createElement('div');\n\n\n    }\n\n\n\n\n    componentDidMount() {\n        // Append the element into the DOM on mount. We'll render\n        // into the modal container element (see the HTML tab).\n        modalRoot.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        // Remove the element from the DOM when we unmount\n        modalRoot.removeChild(this.el);\n    }\n\n\n    render() {\n        // Use a portal to render the children into the element\n        return createPortal(\n            // Any valid React child: JSX, strings, arrays, etc.\n            this.props.children,\n            // A DOM element\n            this.el,\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Modal from './modal';\nimport { DragDropContainer, DropTarget } from 'react-drag-drop-container';\n\n//remove react cruft\n// make controls work on mobile\n// rough clean of rules\n// styling\n// tutorial\n// quick instructions\n// mobile\n// accessibility\n// const vs let -- can make const squares, then do squares[i] = x, so not const?? can't do squares =x though\n// add tests for react components and interactivity\n// allow grid size to be set\n// bomb\n// add islands\n// auto play?\n\nclass Token {\n    constructor(color, shape) {\n        this.color = color;\n        this.shape = shape;\n    }\n}\n\n\nclass Step1 extends React.Component {\n    render() {\n        if (this.props.currentStep !== 1) { // Prop: The current step\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                Take turns dragging an X or O of your color onto the grid.\n                <div className={\"tutorial-board\"}>\n                <div className={\"board-row\"}>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square tutorial1animation4\"}>X</div>\n                    <div className={\"square\"}/>\n                </div>\n                <div className={\"board-row\"}>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                </div>\n                <div className={\"board-row\"}>\n                    <div className={\"square\"}/>\n                    <div className={\"square tutorial1animation3\"}>X</div>\n                    <div className={\"square\"}/>\n                </div>\n                <div className={\"board-row\"}>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square tutorial1animation5\"}>O</div>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                </div>\n                <div className={\"board-row\"}>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                    <div className={\"square\"}/>\n                </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square tray tutorial1animationX\"}>X</div>\n                        <div className={\"square\"}/>\n                        <div className={\"square tray\"}>O</div>\n                        <div className={\"square\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Step2 extends React.Component {\n    render() {\n        if (this.props.currentStep !== 2) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                The same symbol of opposite color cannot be placed next to each other. (Show hints appearing)\n            </div>\n        )\n    }\n}\n\nclass Step3 extends React.Component {\n    render() {\n        if (this.props.currentStep !== 3) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                When no symbol can be placed in a square, it is blacked out. (Show)\n            </div>\n        )\n    }\n}\n\nclass Step4 extends React.Component {\n    render() {\n        if (this.props.currentStep !== 4) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                Win by getting the most 3 on a rows of your color. Symbol doesn't matter. (Show board with lines drawn to indicate sets)\n            </div>\n        )\n    }\n}\n\nfunction PreviousButton(props) {\n    if(props.currentStep !== 1) {\n        return (\n            <button onClick={props.handlePrevious}>Previous</button>\n        )\n    }\n    return null;\n}\n\nfunction NextButton(props) {\n    if(props.currentStep < props.totalSteps) {\n        return (\n            <button onClick={props.handleNext}>Next</button>\n        )\n    }\n    return null;\n}\n\n\nfunction Tutorial(props) {\n    const totalSteps = 4;\n        if (props.showModal) {\n            return (\n                <Modal>\n                    <div className=\"modal\">\n                        <Step1\n                            currentStep = {props.currentStep}\n                        />\n                        <Step2\n                            currentStep = {props.currentStep}\n                        />\n                        <Step3\n                            currentStep = {props.currentStep}\n                        />\n                        <Step4\n                            currentStep = {props.currentStep}\n                        />\n                        <div className=\"navigation\">\n                            <PreviousButton\n                                currentStep={props.currentStep}\n                                handlePrevious={props.handlePrevious}\n                            />\n                            <div>{props.currentStep}/{totalSteps}</div>\n                            <NextButton\n                                currentStep={props.currentStep}\n                                totalSteps={totalSteps}\n                                handleNext={props.handleNext}\n                            />\n                            <button onClick={props.handleHide}>Exit</button>\n                        </div>\n                    </div>\n                </Modal>\n            );\n        } else {\n            return null;\n    }\n\n}\n\nfunction Square(props) {\n    let tokenName = \"square\";\n    let symbol = null;\n    if (props.color) {\n        tokenName += (\" \" + props.color);\n        if (props.shape === 'star') {\n            symbol = 'X';\n        } else if (props.shape === 'circle') {\n            symbol = 'O';\n        }\n    } else if (props.hints && props.hintShape && props.hintColor && props.legalMove[props.hintColor][props.hintShape]) {\n        tokenName += (\" \" + props.hintColor + \" hint\")\n    }\n    return (\n        <div className={tokenName}\n                onDragOver={props.onDragOver}\n                onDrop={props.onDrop}>\n            {symbol}\n        </div>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(row, column) {\n        const squares = this.props.squares;\n        const square = squares[row][column];\n        return (\n            <DropTarget\n                targetKey=\"token\"\n                dropData={{'row':row,'column':column}}\n            >\n            <Square\n                shape={square ? square.shape : null}\n                color={square ? square.color : null}\n                key={row + ',' + column}\n                row={row}\n                column={column}\n                legalMove = {this.props.legalMoves[row][column]}\n                hintShape = {this.props.hintShape}\n                hintColor = {this.props.hintColor}\n                hints={this.props.hints}\n            />\n            </DropTarget>\n        );\n    }\n\n    createSquares() {\n        let rows = [];\n        for (let row = 0; row < this.props.gridSize; row++) {\n            let squares = [];\n            for (let column = 0; column < this.props.gridSize; column++) {\n                squares.push(this.renderSquare(row, column));\n            }\n            rows.push(<div className=\"board-row\" key={row}>{squares}</div>);\n        }\n        return rows;\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.createSquares()}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        let gridSize = 5;\n        let legalMoves = [];\n        for (let rowIndex = 0; rowIndex < gridSize; rowIndex++) {\n            let row = [];\n            for (let columnIndex = 0; columnIndex < gridSize; columnIndex++) {\n                row.push({\n                    'red': {\n                        'star': true,\n                        'circle' : true\n                    },\n                    'blue': {\n                        'star': true,\n                        'circle' : true\n                    }\n                });\n            }\n            legalMoves.push(row);\n        };\n        this.state = {\n            gridSize: gridSize,\n            history: {\n                squares: [Array.from({length: gridSize}, e => Array(gridSize).fill(null))],\n                legalMoves: [legalMoves]\n            },\n            // legalMoves: legalMoves,\n            blueIsNext: true,\n            hints: true,\n            hintColor: null,\n            hintShape: null,\n            showModal: false,\n            currentStep: 1,\n        };\n        // todo understand when need to bind\n        this.handleShow = this.handleShow.bind(this);\n        this.handleHide = this.handleHide.bind(this);\n        this.handlePrevious = this.handlePrevious.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handleHintsChange = this.handleHintsChange.bind(this);\n        this.handleUndo = this.handleUndo.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n\n    }\n\n\n\n    handleShow() {\n        this.setState({showModal: true});\n    }\n\n    handleHide() {\n        this.setState({showModal: false});\n    }\n\n    handlePrevious() {\n        let currentStep = this.state.currentStep\n        currentStep =  currentStep - 1;\n        this.setState({currentStep: currentStep});\n    }\n\n    handleNext() {\n        let currentStep = this.state.currentStep;\n        currentStep =  currentStep + 1;\n        this.setState({currentStep: currentStep});\n    }\n\n    handleDragOver = (e, row, column) => {\n        e.preventDefault();\n    }\n\n    handleDrop(e) {\n        const row = e.dropData.row;\n        const column = e.dropData.column;\n        let shape = e.dragData.shape;\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].map(a => {return a.slice()})\n        let color = (this.state.blueIsNext ? \"blue\" : \"red\");\n        let converseShape = (shape === \"star\" ? \"circle\" : \"star\");\n        let converseColor = (this.state.blueIsNext ? \"red\" : \"blue\");\n\n        // If the selected symbol cannot be legally placed in the square, don't allow it\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = JSON.parse(JSON.stringify(legalMovesHistory[legalMovesHistory.length - 1]))\n\n        if (!(legalMoves[row][column][color][shape])){\n            return;\n        }\n\n        // Update the legal moves (red circle can't be next to blue circle, red star can't be next to blue star)\n        const gridSize = this.state.gridSize;\n        for (let currentRow = row-1; currentRow <= row+1; currentRow++) {\n            for (let currentColumn = column-1; currentColumn <= column+1; currentColumn++) {\n                if (currentRow === row && currentColumn === column) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                    legalMoves[currentRow][currentColumn][converseColor][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][shape] = false;\n                }\n                if (currentRow >=0 && currentColumn >=0 && currentRow < gridSize && currentColumn < gridSize) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                }\n            }\n        }\n\n        // Put a token in the square where the token was dropped\n        squares[row][column] = new Token(color, shape);\n\n        // update next player color\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", (this.state.blueIsNext ? \"var(--red_color)\" : \"var(--blue_color)\"));\n        history.squares = squaresHistory.concat([squares])\n        history.legalMoves = legalMovesHistory.concat([legalMoves])\n        this.setState({\n            history: history,\n            blueIsNext: !this.state.blueIsNext,\n            // legalMoves: legalMoves,\n            hintColor: null,\n            hintShape: null,\n        });\n    }\n\n    handleMouseDown = (e, shape) => {\n        console.log('DOWN');\n        let color = (this.state.blueIsNext ? \"blue\" : \"red\");\n\n        this.setState({\n            hintColor: color,\n            hintShape: shape,\n        });\n        console.log(this.state.hintColor);\n    }\n\n    handleMouseUp = (e) => {\n        console.log('UP');\n        this.setState({\n            hintColor: null,\n            hintShape: null,\n        });\n        console.log(this.state.hintColor);\n\n    }\n\n    handleHintsChange = (event) => {\n        const target = event.target;\n        const value = target.checked;\n\n        this.setState({\n            hints: value\n        });\n    }\n\n    handleUndo = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.length >1 ? history.squares.slice(0,-1) : history.squares.slice();\n        const legalMovesHistory = history.legalMoves.length >1 ? history.legalMoves.slice(0,-1) : history.legalMoves.slice();\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory\n        this.setState({\n                history: history\n            }\n        )\n    }\n\n    handleNewGame = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice(0,1);\n        const legalMovesHistory = history.legalMoves.slice(0,1);\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory\n        this.setState({\n                history: history,\n                blueIsNext: true,\n                hintColor: null,\n                hintShape: null,\n            }\n        )\n    }\n\n\n    render() {\n        const history = this.state.history;\n\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].slice();\n        // const legalMoves = this.state.legalMoves.slice();\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = legalMovesHistory[legalMovesHistory.length - 1].slice();\n\n        // Black out any squares that nothing can be placed in\n        squares = updateBlackout(squares,legalMoves);\n\n        // If one or both players has no more legal moves, fill in the remaining squares\n        if (isEndgame(legalMoves)) {\n            squares = completeEndgame(squares, legalMoves);\n        }\n\n        // Calculate the score\n        const score = calculateScore(squares);\n        const redScore = score.red;\n        const blueScore = score.blue;\n\n        // If all squares are filled, game over\n        // let status = null;\n        // if (allSquaresFilled) {\n        //     status = \"r\"\n        // }\n\n        return (\n            <div className=\"game\">\n                <div className=\"title\">\n                    <h1>Stars and Circles</h1>\n                    <h2>Game by Colin Thom</h2>\n                    <h2>Built by Sarah Edwards</h2>\n                </div>\n                <div className=\"game-board\">\n                    <Board\n                        squares={squares}\n                        gridSize={this.state.gridSize}\n                        legalMoves={legalMoves}\n                        hintShape={this.state.hintShape}\n                        hintColor={this.state.hintColor}\n                        hints={this.state.hints}\n                    />\n                </div>\n                <div className=\"token-area\">\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'star'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"star\")}\n                        >\n                    <div className=\"token\"\n                         onMouseDown={(e) => this.handleMouseDown(e, \"star\")}\n                         onMouseUp={(e) => this.handleMouseUp(e)}\n                    >X\n                    </div>\n                    </DragDropContainer>\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'circle'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"circle\")}\n                    >\n                        <div className=\"token\"\n                             onMouseDown={(e) => this.handleMouseDown(e, \"circle\")}\n                             onMouseUp={(e) => this.handleMouseUp(e)}\n                        >O\n                        </div>\n                    </DragDropContainer>\n\n                </div>\n                <div className=\"score\">\n                    Score:\n                    <div className=\"red-score\">\n                        {redScore}\n                    </div>\n                    <div className=\"blue-score\">\n                        {blueScore}\n                    </div>\n                </div>\n                <div className=\"controls\">\n                    <label className={\"hints\"}>\n                        Hints\n                        <input\n                            name=\"hints\"\n                            type=\"checkbox\"\n                            checked={this.state.hints}\n                            onChange={this.handleHintsChange} />\n                    </label>\n                    <button onClick={this.handleUndo}>Undo</button>\n                    <button onClick={this.handleNewGame}>New</button>\n                    <div className=\"tutorial\">\n                        <button onClick={this.handleShow}>Rules</button>\n                        <Tutorial\n                            showModal={this.state.showModal}\n                            currentStep={this.state.currentStep}\n                            handleHide={this.handleHide}\n                            handlePrevious={this.handlePrevious}\n                            handleNext={this.handleNext}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\n// ReactDOM.render(<Game />, document.getElementById(\"root\"));\nReactDOM.render(\n    (<Game />),\n    document.getElementById('root') || document.createElement('div') // for testing purposes\n);\n\n\n\nexport function calculateHorizontalScore(grid) {\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let row in grid) {\n        for (let column = 0; column < grid[0].length - 2; column ++) {\n            let first = grid[row][column];\n            let second = grid[row][column + 1];\n            let third = grid[row][column + 2];\n            if (first && second && third) {\n                if (first.color === second.color && first.color === third.color) {\n                    scores[first.color] += 1;\n                }\n            }\n        }\n    }\n\n    return scores\n}\n\nexport function calculateVerticalScore(grid) {\n    // transpose the grid\n    let vertical = grid[0].map(function(col, i){\n        return grid.map(function(row){\n            return row[i];\n        });\n    });\n\n    // Calculate the transposed grid score\n    return calculateHorizontalScore(vertical)\n\n}\n\nexport function transposeDiagonalFromLeft(grid) {\n    // Shift the grid so that the diagonals from upper left to lower right are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ N, N, 0, 1, 2 ],\n    //   [ N, 3, 4, 5, N ],\n    //   [ 6, 7, 8, N, N ]\n    // ] where N is null\n    let leftShift = [];\n    for (let row in grid) {\n        let prepend = Array(grid[row].length - 1 - row).fill(null);\n        let append = Array(parseInt(row)).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        leftShift.push(newRow);\n    }\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    let diagonalFromLeft = leftShift[0].map(function(col, i){\n        return leftShift.map(function(row){\n            return row[i];\n        });\n    });\n    return diagonalFromLeft\n}\n\nexport function transposeDiagonalFromRight(grid) {\n    // Shift the grid so that the diagonals from upper right to lower left are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ 0, 1, 2, N, N],\n    //   [ N, 3, 4, 5, N],\n    //   [ N, N, 6, 7, 8 ]\n    // ] where N is null\n    let rightShift = [];\n    for (let row in grid) {\n        let prepend = Array(parseInt(row)).fill(null);\n        let append = Array(grid[row].length - 1 - row).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        rightShift.push(newRow);\n    };\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    let diagonalFromRight = rightShift[0].map(function(col, i){\n        return rightShift.map(function(row){\n            return row[i];\n        });\n    });\n    return diagonalFromRight\n}\n\nexport function calculateDiagonalFromLeftScore(grid) {\n    let diagonalFromLeft = transposeDiagonalFromLeft(grid);\n    return calculateHorizontalScore(diagonalFromLeft)\n}\n\nexport function calculateDiagonalFromRightScore(grid) {\n    let diagonalFromRight = transposeDiagonalFromRight(grid);\n    return calculateHorizontalScore(diagonalFromRight)\n}\n\nexport function calculateScore(squares) {\n\n    let horizontalScores = calculateHorizontalScore(squares);\n    let verticalScores = calculateVerticalScore(squares);\n    let diagonalFromLeftScores = calculateDiagonalFromLeftScore(squares);\n    let diagonalFromRightScores = calculateDiagonalFromRightScore(squares);\n\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let key in scores) {\n        scores[key]= (\n            horizontalScores[key]\n            + verticalScores[key]\n            + diagonalFromLeftScores[key]\n            + diagonalFromRightScores[key]\n        )\n    };\n    return scores;\n}\n\n\nexport function isEndgame(legalMoves) {\n    let anyLegal = {\n        'red': false,\n        'blue': false\n    };\n    for (let row of legalMoves) {\n        for (let square of row) {\n            for (let key in anyLegal) {\n                if (!anyLegal[key] && (square[key]['star'] || square[key]['circle'])) {\n                    anyLegal[key] = true\n                }\n            }\n        }\n    }\n    // If there are legal moves for BOTH red and blue remaining, return true\n    return !(anyLegal['red'] && anyLegal['blue']);\n}\n\nexport function completeEndgame(squares, legalMoves) {\n    alert(\"No choices left for remaining squares! Empty squares will be filled automatically.\")\n    // Fill in the squares with blue/red as possible\n    let completed_squares = squares.slice();\n    for (let rowIndex in completed_squares) {\n        for (let columnIndex in completed_squares[rowIndex]) {\n            // If the square is unoccupied\n            if (!completed_squares[rowIndex][columnIndex]) {\n                let legalMove = legalMoves[rowIndex][columnIndex];\n                if (legalMove['red']['star'] || legalMove['red']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('red', 'null')\n                }\n                if (legalMove['blue']['star'] || legalMove['blue']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('blue', 'null')\n                }\n            }\n        }\n    }\n    return completed_squares\n}\n\n\nexport function updateBlackout(squares, legalMoves) {\n    for (let rowIndex in squares) {\n        for (let columnIndex in squares[rowIndex]) {\n            let square = squares[rowIndex][columnIndex];\n            let legal = legalMoves[rowIndex][columnIndex];\n            if (!square && !legal['red']['circle'] && !legal['red']['star'] && !legal['blue']['circle'] && !legal['blue']['star']) {\n                let token = new Token('black', 'null');\n                squares[rowIndex][columnIndex] = token;\n            }\n        }\n    }\n    return squares\n}"],"sourceRoot":""}