{"version":3,"sources":["modal.js","rules.js","index.js"],"names":["modalRoot","document","getElementById","Modal","props","element","createElement","appendChild","this","removeChild","createPortal","children","React","Component","rules","className","Rule","ruleNumber","currentRule","PreviousButton","onClick","handlePrevious","disabled","NextButton","length","handleNext","Tutorial","totalSteps","ruleDisplay","Array","from","map","_","step","key","showRules","handleHide","Token","color","shape","Square","tokenName","symbol","hints","hintShape","hintColor","legalMove","onDragOver","onDrop","Board","row","column","square","squares","targetKey","dropData","legalMoves","rows","gridSize","push","renderSquare","createSquares","Game","handleDragOver","e","preventDefault","handleMouseDown","state","blueIsNext","setState","handleMouseUp","handleHintsChange","event","value","target","checked","handleUndo","history","squaresHistory","slice","legalMovesHistory","getElementsByTagName","style","setProperty","handleNewGame","rowIndex","columnIndex","fill","handleShow","bind","currentStep","dragData","a","converseShape","converseColor","JSON","parse","stringify","currentRow","currentColumn","concat","updateBlackout","isEndgame","completeEndgame","score","calculateScore","redScore","red","blueScore","blue","handleDrop","onDragStart","onMouseDown","onMouseUp","name","type","onChange","calculateHorizontalScore","grid","scores","first","second","third","calculateVerticalScore","transposeGrid","i","transposeDiagonalFromLeft","leftShift","prepend","append","parseInt","newRow","transposeDiagonalFromRight","rightShift","calculateDiagonalFromLeftScore","calculateDiagonalFromRightScore","horizontalScores","verticalScores","diagonalFromLeftScores","diagonalFromRightScores","anyLegal","alert","completed_squares","legal","token","ReactDOM","render"],"mappings":"41BAIMA,G,YAAYC,SAASC,eAAgB,UA6B5BC,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,QAAUJ,SAASK,cAAc,OAHvB,E,gEAQfN,EAAUO,YAAYC,KAAKH,W,6CAK3BL,EAAUS,YAAYD,KAAKH,W,+BAM3B,OAAOK,uBACHF,KAAKJ,MAAMO,SACXH,KAAKH,a,GAtBGO,IAAMC,WCHpBC,EAAQ,CACV,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,iBACX,wDACA,6BACA,0CACA,0CACA,6BACA,mDACA,yDAIR,yBAAKA,UAAU,gBACX,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,wBAAhB,KACA,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,wBAAhB,KACA,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,wBAAhB,KACA,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,uBAAhB,KACA,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,uBAAhB,KACA,yBAAKA,UAAW,kBAGxB,yBAAKA,UAAU,iBAAf,iFAKJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,cAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,eAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,uBAAhB,KACA,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,yBAAhB,KACA,yBAAKA,UAAW,kBAGxB,yBAAKA,UAAU,iBACX,wHACA,gFAIR,yBAAKA,UAAU,gBACX,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,iBAChB,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,yBAAhB,KACA,yBAAKA,UAAW,gBAChB,yBAAKA,UAAW,yBAAhB,KACA,yBAAKA,UAAW,kBAGxB,yBAAKA,UAAU,iBAAf,yEAKJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,2BAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,2BAAhB,KACA,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,2BAAhB,KACA,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,4BAAhB,KACA,yBAAKA,UAAW,6BAAhB,KACA,yBAAKA,UAAW,6BAAhB,KACA,yBAAKA,UAAW,4BAAhB,KACA,yBAAKA,UAAW,YAEpB,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,WAChB,yBAAKA,UAAW,aAGxB,yBAAKA,UAAU,iBAAf,iFAKJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,0BAChB,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,0BAChB,yBAAKA,UAAW,cAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,0BAChB,yBAAKA,UAAW,eAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,iBAChB,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,iBAChB,yBAAKA,UAAW,cAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,cAAhB,MAEJ,yBAAKA,UAAW,aACZ,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,eAAhB,KACA,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,cAAhB,KACA,yBAAKA,UAAW,eAAhB,OAGR,yBAAKA,UAAU,iBACX,0FACA,wGAKR,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,iBACX,yEAMNC,E,uKAEE,IAAIC,EAAaT,KAAKJ,MAAMa,WAC5B,OAAIT,KAAKJ,MAAMc,cAAgBD,EACpB,KAGPH,EAAMG,EAAW,O,GAPVL,IAAMC,WAYzB,SAASM,EAAef,GACpB,OAAyB,IAAtBA,EAAMc,YAED,4BAAQE,QAAShB,EAAMiB,gBAAvB,YAGD,4BAAQC,UAAQ,GAAhB,YAGX,SAASC,EAAWnB,GAChB,OAAGA,EAAMc,YAAcJ,EAAMU,OAErB,4BAAQJ,QAAShB,EAAMqB,YAAvB,QAGD,4BAAQH,UAAQ,GAAhB,QAuCII,MApCf,SAAkBtB,GACd,IAAMuB,EAAab,EAAMU,OACrBI,EAAcC,MAAMC,KAAKD,MAAMF,IAAaI,KAAI,SAACC,EAAGC,GAAJ,OAAa,kBAAC,EAAD,CAC7DhB,WAAcgB,EAAK,EACnBf,YAAed,EAAMc,YACrBgB,IAAOD,EAAK,OAEhB,OAAI7B,EAAM+B,UAEF,kBAAC,EAAD,KACI,yBAAKpB,UAAU,SACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,uBACX,kBAACI,EAAD,CACID,YAAad,EAAMc,YACnBG,eAAgBjB,EAAMiB,iBAE1B,6BAAMjB,EAAMc,YAAZ,IAA0BS,GAC1B,kBAACJ,EAAD,CACIL,YAAad,EAAMc,YACnBS,WAAYA,EACZF,WAAYrB,EAAMqB,aAEtB,4BAAQL,QAAShB,EAAMgC,YAAvB,SAEHR,KAMV,M,OC5TTS,EACF,WAAYC,EAAOC,GAAQ,oBACvB/B,KAAK8B,MAAQA,EACb9B,KAAK+B,MAAQA,GAIrB,SAASC,EAAOpC,GACZ,IAAIqC,EAAY,SACZC,EAAS,KAWb,OAVItC,EAAMkC,OACNG,GAAc,IAAMrC,EAAMkC,MACN,SAAhBlC,EAAMmC,MACNG,EAAS,IACc,WAAhBtC,EAAMmC,QACbG,EAAS,MAENtC,EAAMuC,OAASvC,EAAMwC,WAAaxC,EAAMyC,WAAazC,EAAM0C,UAAU1C,EAAMyC,WAAWzC,EAAMwC,aACnGH,GAAc,IAAMrC,EAAMyC,UAAY,SAGtC,yBAAK9B,UAAW0B,EACXM,WAAY3C,EAAM2C,WAClBC,OAAQ5C,EAAM4C,QACdN,G,IAKPO,E,2KAEWC,EAAKC,GACd,IACMC,EADU5C,KAAKJ,MAAMiD,QACJH,GAAKC,GAC5B,OACI,kBAAC,aAAD,CACIG,UAAU,QACVC,SAAU,CAAC,IAAML,EAAK,OAASC,GAC/BjB,IAAKgB,EAAM,IAAMC,GAEjB,kBAACX,EAAD,CACID,MAAOa,EAASA,EAAOb,MAAQ,KAC/BD,MAAOc,EAASA,EAAOd,MAAQ,KAC/BJ,IAAKgB,EAAM,IAAMC,EACjBD,IAAKA,EACLC,OAAQA,EACRL,UAAatC,KAAKJ,MAAMoD,WAAWN,GAAKC,GACxCP,UAAapC,KAAKJ,MAAMwC,UACxBC,UAAarC,KAAKJ,MAAMyC,UACxBF,MAAOnC,KAAKJ,MAAMuC,W,sCAQ9B,IADA,IAAIc,EAAO,GACFP,EAAM,EAAGA,EAAM1C,KAAKJ,MAAMsD,SAAUR,IAAO,CAEhD,IADA,IAAIG,EAAU,GACLF,EAAS,EAAGA,EAAS3C,KAAKJ,MAAMsD,SAAUP,IAC/CE,EAAQM,KAAKnD,KAAKoD,aAAaV,EAAKC,IAExCM,EAAKE,KAAK,yBAAK5C,UAAU,YAAYmB,IAAKgB,GAAMG,IAEpD,OAAOI,I,+BAIP,OACI,6BACKjD,KAAKqD,qB,GAzCFjD,IAAMC,WA+CpBiD,E,kDACF,WAAY1D,GAAQ,IAAD,uBACf,cAAMA,IAgEV2D,eAAiB,SAACC,EAAGd,EAAKC,GACtBa,EAAEC,kBAlEa,EAwHnBC,gBAAkB,SAACF,EAAGzB,GAClB,IAAMD,EAAS,EAAK6B,MAAMC,WAAa,OAAS,MAChD,EAAKC,SAAS,CACVxB,UAAWP,EACXM,UAAWL,KA5HA,EAgInB+B,cAAgB,SAACN,GACb,EAAKK,SAAS,CACVxB,UAAW,KACXD,UAAW,QAnIA,EAuInB2B,kBAAoB,SAACC,GACjB,IACMC,EADSD,EAAME,OACAC,QACrB,EAAKN,SAAS,CACV1B,MAAO8B,KA3II,EA+InBG,WAAa,SAACJ,GACV,IAAIK,EAAU,EAAKV,MAAMU,QACnBC,EAAiBD,EAAQxB,QAAQ7B,OAAS,EAAIqD,EAAQxB,QAAQ0B,MAAM,GAAG,GAAKF,EAAQxB,QAAQ0B,QAC5FC,EAAoBH,EAAQrB,WAAWhC,OAAQ,EAAIqD,EAAQrB,WAAWuB,MAAM,GAAG,GAAKF,EAAQrB,WAAWuB,QAC7GF,EAAQxB,QAAUyB,EAClBD,EAAQrB,WAAawB,EACrB,IAAMZ,IAAaS,EAAQxB,QAAQ7B,OAAS,KAAM,EAAK2C,MAAMC,WAClDnE,SAASgF,qBAAqB,QAAQ,GAC5CC,MAAMC,YAAY,iBAAmBf,EAAa,oBAAsB,oBAC7E,EAAKC,SAAS,CACNQ,QAASA,EACTT,WAAYA,KA1JL,EA+JnBgB,cAAgB,SAACZ,GACb,IAAIK,EAAU,EAAKV,MAAMU,QACnBC,EAAiBD,EAAQxB,QAAQ0B,MAAM,EAAE,GACzCC,EAAoBH,EAAQrB,WAAWuB,MAAM,EAAE,GACrDF,EAAQxB,QAAUyB,EAClBD,EAAQrB,WAAawB,EACV/E,SAASgF,qBAAqB,QAAQ,GAC5CC,MAAMC,YAAY,iBAAkB,qBACzC,EAAKd,SAAS,CACNQ,QAASA,EACTT,YAAY,EACZvB,UAAW,KACXD,UAAW,QAvKnB,IAFA,IACIY,EAAa,GACR6B,EAAW,EAAGA,EAFR,EAE6BA,IAAY,CAEpD,IADA,IAAInC,EAAM,GACDoC,EAAc,EAAGA,EAJf,EAIuCA,IAC9CpC,EAAIS,KAAK,CACL,IAAO,CACH,MAAQ,EACR,QAAW,GAEf,KAAQ,CACJ,MAAQ,EACR,QAAW,KAIvBH,EAAWG,KAAKT,GAlBL,OAoBf,EAAKiB,MAAQ,CACTT,SAnBW,EAoBXmB,QAAS,CACLxB,QAAS,CAACxB,MAAMC,KAAK,CAACN,OArBf,IAqBkC,SAAAwC,GAAC,OAAInC,MArBvC,GAqBuD0D,KAAK,UACnE/B,WAAY,CAACA,IAEjBY,YAAY,EACZzB,OAAO,EACPE,UAAW,KACXD,UAAW,KACXT,WAAW,EACXjB,YAAa,GAGjB,EAAKsE,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKrD,WAAa,EAAKA,WAAWqD,KAAhB,gBAClB,EAAKpE,eAAiB,EAAKA,eAAeoE,KAApB,gBACtB,EAAKhE,WAAa,EAAKA,WAAWgE,KAAhB,gBAClB,EAAKlB,kBAAoB,EAAKA,kBAAkBkB,KAAvB,gBACzB,EAAKL,cAAgB,EAAKA,cAAcK,KAAnB,gBAvCN,E,yDA2CfjF,KAAK6D,SAAS,CAAClC,WAAW,M,mCAI1B3B,KAAK6D,SAAS,CACVlC,WAAW,EACXuD,YAAa,M,uCAKjB,IAAIxE,EAAcV,KAAK2D,MAAMjD,YAC7BA,GAA6B,EAC7BV,KAAK6D,SAAS,CAACnD,YAAaA,M,mCAI5B,IAAIA,EAAcV,KAAK2D,MAAMjD,YAC7BA,GAA6B,EAC7BV,KAAK6D,SAAS,CAACnD,YAAaA,M,iCAOrB8C,GACP,IAAMd,EAAMc,EAAET,SAASL,IACjBC,EAASa,EAAET,SAASJ,OACtBZ,EAAQyB,EAAE2B,SAASpD,MACnBsC,EAAUrE,KAAK2D,MAAMU,QACnBC,EAAiBD,EAAQxB,QAAQ0B,QACnC1B,EAAUyB,EAAeA,EAAetD,OAAS,GAAGO,KAAI,SAAA6D,GAAM,OAAOA,EAAEb,WACvEzC,EAAS9B,KAAK2D,MAAMC,WAAa,OAAS,MAC1CyB,EAA2B,SAAVtD,EAAmB,SAAW,OAC/CuD,EAAiBtF,KAAK2D,MAAMC,WAAa,MAAQ,OAG/CY,EAAoBH,EAAQrB,WAAWuB,QACzCvB,EAAauC,KAAKC,MAAMD,KAAKE,UAAUjB,EAAkBA,EAAkBxD,OAAS,KACxF,GAAMgC,EAAWN,GAAKC,GAAQb,GAAOC,GAArC,CAMA,IADA,IAAMmB,EAAWlD,KAAK2D,MAAMT,SACnBwC,EAAahD,EAAI,EAAGgD,GAAchD,EAAI,EAAGgD,IAC9C,IAAK,IAAIC,EAAgBhD,EAAO,EAAGgD,GAAiBhD,EAAO,EAAGgD,IACtDD,IAAehD,GAAOiD,IAAkBhD,IACxCK,EAAW0C,GAAYC,GAAeL,GAAevD,IAAS,EAC9DiB,EAAW0C,GAAYC,GAAeL,GAAeD,IAAiB,EACtErC,EAAW0C,GAAYC,GAAe7D,GAAOuD,IAAiB,EAC9DrC,EAAW0C,GAAYC,GAAe7D,GAAOC,IAAS,GAEtD2D,GAAa,GAAKC,GAAgB,GAAKD,EAAaxC,GAAYyC,EAAgBzC,IAChFF,EAAW0C,GAAYC,GAAeL,GAAevD,IAAS,GAM1Ec,EAAQH,GAAKC,GAAU,IAAId,EAAMC,EAAOC,GAG7BtC,SAASgF,qBAAqB,QAAQ,GAC5CC,MAAMC,YAAY,iBAAmB3E,KAAK2D,MAAMC,WAAa,mBAAqB,qBAEvFS,EAAQxB,QAAUyB,EAAesB,OAAO,CAAC/C,IACzCwB,EAAQrB,WAAawB,EAAkBoB,OAAO,CAAC5C,IAC/ChD,KAAK6D,SAAS,CACVQ,QAASA,EACTT,YAAa5D,KAAK2D,MAAMC,WACxBvB,UAAW,KACXD,UAAW,U,+BA4DT,IAAD,OACCiC,EAAUrE,KAAK2D,MAAMU,QACrBC,EAAiBD,EAAQxB,QAAQ0B,QACnC1B,EAAUyB,EAAeA,EAAetD,OAAS,GAAGuD,QAClDC,EAAoBH,EAAQrB,WAAWuB,QACzCvB,EAAawB,EAAkBA,EAAkBxD,OAAS,GAAGuD,QAGjE1B,EAAUgD,EAAehD,EAAQG,GAG7B8C,EAAU9C,KACVH,EAAUkD,EAAgBlD,EAASG,IAIvC,IAAMgD,EAAQC,EAAepD,GACvBqD,EAAWF,EAAMG,IACjBC,EAAYJ,EAAMK,KAQxB,OACI,yBAAK9F,UAAU,QACX,yBAAKA,UAAU,SACX,kDAEJ,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIsC,QAASA,EACTK,SAAUlD,KAAK2D,MAAMT,SACrBF,WAAYA,EACZZ,UAAWpC,KAAK2D,MAAMvB,UACtBC,UAAWrC,KAAK2D,MAAMtB,UACtBF,MAAOnC,KAAK2D,MAAMxB,SAG1B,yBAAK5B,UAAU,cACX,kBAAC,oBAAD,CACIuC,UAAU,QACVqC,SAAU,CAACpD,MAAM,QACjBS,OAAQ,SAACgB,GAAD,OAAO,EAAK8C,WAAW9C,IAC/B+C,YAAa,SAAC/C,GAAD,OAAO,EAAKE,gBAAgBF,EAAG,UAE5C,yBAAKjD,UAAU,QACViG,YAAa,SAAChD,GAAD,OAAO,EAAKE,gBAAgBF,EAAG,SAC5CiD,UAAW,SAACjD,GAAD,OAAO,EAAKM,cAAcN,KAF1C,MAMJ,kBAAC,oBAAD,CACIV,UAAU,QACVqC,SAAU,CAACpD,MAAM,UACjBS,OAAQ,SAACgB,GAAD,OAAO,EAAK8C,WAAW9C,IAC/B+C,YAAa,SAAC/C,GAAD,OAAO,EAAKE,gBAAgBF,EAAG,YAE5C,yBAAKjD,UAAU,QACViG,YAAa,SAAChD,GAAD,OAAO,EAAKE,gBAAgBF,EAAG,WAC5CiD,UAAW,SAACjD,GAAD,OAAO,EAAKM,cAAcN,KAF1C,OAOR,yBAAKjD,UAAU,SAAf,SAEI,yBAAKA,UAAU,aACV2F,GAEL,yBAAK3F,UAAU,cACV6F,IAGT,yBAAK7F,UAAU,YACX,2BAAOA,UAAW,SAAlB,QAEI,2BACImG,KAAK,QACLC,KAAK,WACLxC,QAASnE,KAAK2D,MAAMxB,MACpByE,SAAU5G,KAAK+D,qBAEvB,4BAAQnD,QAASZ,KAAKoE,YAAtB,QACA,4BAAQxD,QAASZ,KAAK4E,eAAtB,OACA,4BAAQhE,QAASZ,KAAKgF,YAAtB,UAEJ,yBAAKzE,UAAU,YACX,kBAAC,EAAD,CACIoB,UAAW3B,KAAK2D,MAAMhC,UACtBjB,YAAaV,KAAK2D,MAAMjD,YACxBkB,WAAY5B,KAAK4B,WACjBf,eAAgBb,KAAKa,eACrBI,WAAYjB,KAAKiB,mB,GAhRtBb,IAAMC,WAgSlB,SAASwG,EAAyBC,GACrC,IAAIC,EAAS,CACT,IAAQ,EACR,KAAQ,GAGZ,IAAK,IAAIrE,KAAOoE,EACZ,IAAK,IAAInE,EAAS,EAAGA,EAASmE,EAAK,GAAG9F,OAAS,EAAG2B,IAAW,CACzD,IAAIqE,EAAQF,EAAKpE,GAAKC,GAClBsE,EAASH,EAAKpE,GAAKC,EAAS,GAC5BuE,EAAQJ,EAAKpE,GAAKC,EAAS,GAC3BqE,GAASC,GAAUC,GACfF,EAAMlF,QAAUmF,EAAOnF,OAASkF,EAAMlF,QAAUoF,EAAMpF,QACtDiF,EAAOC,EAAMlF,QAAU,GAMvC,OAAOiF,EAGJ,SAASI,EAAuBL,GAKnC,OAAOD,EAHQO,EAAcN,IAM1B,SAASM,EAAcN,GAE1B,OAAQA,EAAK,GAAGvF,KAAI,SAASoB,EAAQ0E,GACjC,OAAOP,EAAKvF,KAAI,SAASmB,GACrB,OAAOA,EAAI2E,SAKhB,SAASC,EAA0BR,GAYtC,IAAIS,EAAY,GAChB,IAAK,IAAI7E,KAAOoE,EAAM,CAClB,IAAIU,EAAUnG,MAAMyF,EAAKpE,GAAK1B,OAAS,EAAI0B,GAAKqC,KAAK,MACjD0C,EAASpG,MAAMqG,SAAShF,IAAMqC,KAAK,MACnC4C,EAASH,EAAQ5B,OAAOkB,EAAKpE,GAAKkD,OAAO6B,IAC7CF,EAAUpE,KAAKwE,GAWnB,OAAOP,EAAcG,GAGlB,SAASK,EAA2Bd,GAYvC,IAAIe,EAAa,GACjB,IAAK,IAAInF,KAAOoE,EAAM,CAClB,IAAIU,EAAUnG,MAAMqG,SAAShF,IAAMqC,KAAK,MACpC0C,EAASpG,MAAMyF,EAAKpE,GAAK1B,OAAS,EAAI0B,GAAKqC,KAAK,MAChD4C,EAASH,EAAQ5B,OAAOkB,EAAKpE,GAAKkD,OAAO6B,IAC7CI,EAAW1E,KAAKwE,GAWpB,OAAOP,EAAcS,GAGlB,SAASC,EAA+BhB,GAE3C,OAAOD,EADgBS,EAA0BR,IAI9C,SAASiB,EAAgCjB,GAE5C,OAAOD,EADiBe,EAA2Bd,IAIhD,SAASb,EAAepD,GAE3B,IAAImF,EAAmBnB,EAAyBhE,GAC5CoF,EAAiBd,EAAuBtE,GACxCqF,EAAyBJ,EAA+BjF,GACxDsF,EAA0BJ,EAAgClF,GAE1DkE,EAAS,CACT,IAAQ,EACR,KAAQ,GAGZ,IAAK,IAAIrF,KAAOqF,EACZA,EAAOrF,GACHsG,EAAiBtG,GACfuG,EAAevG,GACfwG,EAAuBxG,GACvByG,EAAwBzG,GAIlC,OAAOqF,EAGJ,SAASjB,EAAU9C,GACtB,IADkC,EAC9BoF,EAAW,CACX,KAAO,EACP,MAAQ,GAHsB,cAKlBpF,GALkB,IAKlC,2BAA4B,CAAC,IAAD,EAAnBN,EAAmB,sBACLA,GADK,IACxB,2BAAwB,CAAC,IAAhBE,EAAe,QACpB,IAAK,IAAIlB,KAAO0G,EACPA,EAAS1G,KAASkB,EAAOlB,GAAP,OAAuBkB,EAAOlB,GAAP,SAC1C0G,EAAS1G,IAAO,IAJJ,gCALM,8BAelC,QAAS0G,EAAQ,KAAWA,EAAQ,MAGjC,SAASrC,EAAgBlD,EAASG,GACrCqF,MAAM,sFAEN,IAAIC,EAAoBzF,EAAQ0B,QAChC,IAAK,IAAIM,KAAYyD,EACjB,IAAK,IAAIxD,KAAewD,EAAkBzD,GAEtC,IAAKyD,EAAkBzD,GAAUC,GAAc,CAC3C,IAAIxC,EAAYU,EAAW6B,GAAUC,IACjCxC,EAAS,IAAT,MAA4BA,EAAS,IAAT,UAC5BgG,EAAkBzD,GAAUC,GAAe,IAAIjD,EAAM,MAAO,UAE5DS,EAAS,KAAT,MAA6BA,EAAS,KAAT,UAC7BgG,EAAkBzD,GAAUC,GAAe,IAAIjD,EAAM,OAAQ,SAK7E,OAAOyG,EAGJ,SAASzC,EAAehD,EAASG,GACpC,IAAK,IAAI6B,KAAYhC,EACjB,IAAK,IAAIiC,KAAejC,EAAQgC,GAAW,CACvC,IAAIjC,EAASC,EAAQgC,GAAUC,GAC3ByD,EAAQvF,EAAW6B,GAAUC,GACjC,IAAKlC,IAAW2F,EAAK,IAAL,SAA2BA,EAAK,IAAL,OAAyBA,EAAK,KAAL,SAA4BA,EAAK,KAAL,KAAuB,CACnH,IAAIC,EAAQ,IAAI3G,EAAM,QAAS,QAC/BgB,EAAQgC,GAAUC,GAAe0D,GAI7C,OAAO3F,EA9LX4F,IAASC,OACJ,kBAAC,EAAD,MACDjJ,SAASC,eAAe,SAAWD,SAASK,cAAc,U","file":"static/js/main.8d12cc74.chunk.js","sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\n\n// Get the element with the id 'modal' from index.html\nconst modalRoot = document.getElementById( 'modal' );\n\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        // Create a div to render the modal into\n        this.element = document.createElement('div');\n    }\n\n    componentDidMount() {\n        // Append the element into the DOM on mount\n        modalRoot.appendChild(this.element);\n    }\n\n    componentWillUnmount() {\n        // Remove the element from the DOM when on unmount\n        modalRoot.removeChild(this.element);\n    }\n\n    render() {\n        // Use a portal to render the children into the element\n        // (Takes any valid React child (JSX, strings, arrays, etc.) and an element in the DOM\n        return createPortal(\n            this.props.children,\n            this.element,\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n","import React from \"react\";\nimport Modal from \"./modal\";\n\nconst rules = [\n    <div className=\"tutorialStep\">\n        <div className=\"tutorial-text\">\n            <div>A spatial strategy game</div>\n            <br/>\n            <div>2 Players</div>\n            <div>5 Minutes</div>\n            <br/>\n            <div>Game by Colin Thom</div>\n            <div>Built by Sarah Edwards</div>\n        </div>\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className={\"tutorial-board\"}>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square step1_square2\"}>O</div>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square step1_square1\"}>X</div>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square step1_square3\"}>O</div>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray step1_X\"}>X</div>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray step1_O\"}>O</div>\n                <div className={\"square tray\"}/>\n            </div>\n        </div>\n        <div className=\"tutorial-text\">\n            Players take turns dragging a symbol (X or O) of their color onto the board.\n        </div>\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className={\"tutorial-board\"}>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square red\"}>O</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square blue\"}>X</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray step2_X\"}>X</div>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray red_token\"}>O</div>\n                <div className={\"square tray\"}/>\n            </div>\n        </div>\n        <div className=\"tutorial-text\">\n            <div>Matching symbols of opposite color cannot be placed adjacent or diagonal to each other.</div>\n            <div>(Turn hints on/off to show/hide legal moves.)</div>\n        </div>\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className={\"tutorial-board\"}>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square red\"}>X</div>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square blue\"}>O</div>\n                <div className={\"square black\"}/>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray red_token\"}>X</div>\n                <div className={\"square tray\"}/>\n                <div className={\"square tray red_token\"}>O</div>\n                <div className={\"square tray\"}/>\n            </div>\n        </div>\n        <div className=\"tutorial-text\">\n            When no symbol can be placed in a square, the square is blacked out.\n        </div>\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className={\"tutorial-board\"}>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square red step4_score3\"}>O</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square red step4_score3\"}>X</div>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square red step4_score3\"}>O</div>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square blue step4_score1\"}>O</div>\n                <div className={\"square blue step4_score12\"}>X</div>\n                <div className={\"square blue step4_score12\"}>X</div>\n                <div className={\"square blue step4_score2\"}>X</div>\n                <div className={\"square\"}/>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n                <div className={\"square\"}/>\n            </div>\n        </div>\n        <div className=\"tutorial-text\">\n            Score a point by getting a 3-in-a-row of your color (symbol doesn't matter).\n        </div>\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className={\"tutorial-board\"}>\n            <div className={\"board-row\"}>\n                <div className={\"square red\"}>X</div>\n                <div className={\"square step_ends_auto\"}/>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square step_ends_auto\"}/>\n                <div className={\"square red\"}>X</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square blue\"}>O</div>\n                <div className={\"square blue\"}>O</div>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square step_ends_auto\"}/>\n                <div className={\"square blue\"}>O</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square red\"}>X</div>\n                <div className={\"square black\"}/>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square black\"}/>\n                <div className={\"square red\"}>X</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square red\"}>O</div>\n            </div>\n            <div className={\"board-row\"}>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square blue\"}>X</div>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square red\"}>O</div>\n                <div className={\"square blue\"}>X</div>\n            </div>\n        </div>\n        <div className=\"tutorial-text\">\n            <div>The game ends when one player cannot make any more moves.</div>\n            <div>Any remaining moves for the other player will complete automatically.</div>\n        </div>\n\n    </div>,\n\n    <div className=\"tutorialStep\">\n        <div className=\"tutorial-text\">\n            <div>The player with the most points wins!</div>\n        </div>\n    </div>,\n\n];\n\nclass Rule extends React.Component {\n    render () {\n        let ruleNumber = this.props.ruleNumber;\n        if (this.props.currentRule !== ruleNumber) {\n            return null\n        }\n        return(\n            rules[ruleNumber-1]\n        )\n    }\n}\n\nfunction PreviousButton(props) {\n    if(props.currentRule !== 1) {\n        return (\n            <button onClick={props.handlePrevious}>Previous</button>\n        )\n    }\n    return <button disabled>Previous</button>;\n}\n\nfunction NextButton(props) {\n    if(props.currentRule < rules.length) {\n        return (\n            <button onClick={props.handleNext}>Next</button>\n        )\n    }\n    return <button disabled>Next</button>;\n}\n\nfunction Tutorial(props) {\n    const totalSteps = rules.length;\n    let ruleDisplay = Array.from(Array(totalSteps)).map((_, step) => <Rule\n        ruleNumber = {step+1}\n        currentRule = {props.currentRule}\n        key = {step+1}\n    />);\n    if (props.showRules) {\n        return (\n            <Modal>\n                <div className=\"modal\">\n                    <div className=\"tutorial\">\n                        <div className=\"tutorial-navigation\">\n                            <PreviousButton\n                                currentRule={props.currentRule}\n                                handlePrevious={props.handlePrevious}\n                            />\n                            <div>{props.currentRule}/{totalSteps}</div>\n                            <NextButton\n                                currentRule={props.currentRule}\n                                totalSteps={totalSteps}\n                                handleNext={props.handleNext}\n                            />\n                            <button onClick={props.handleHide}>Exit</button>\n                        </div>\n                        {ruleDisplay}\n                    </div>\n                </div>\n            </Modal>\n        );\n    } else {\n        return null;\n    }\n\n}\n\nexport default Tutorial;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './rules.css';\nimport Tutorial from './rules.js';\nimport { DragDropContainer, DropTarget } from 'react-drag-drop-container';\n\n\nclass Token {\n    constructor(color, shape) {\n        this.color = color;\n        this.shape = shape;\n    }\n}\n\nfunction Square(props) {\n    let tokenName = \"square\";\n    let symbol = null;\n    if (props.color) {\n        tokenName += (\" \" + props.color);\n        if (props.shape === 'star') {\n            symbol = 'X';\n        } else if (props.shape === 'circle') {\n            symbol = 'O';\n        }\n    } else if (props.hints && props.hintShape && props.hintColor && props.legalMove[props.hintColor][props.hintShape]) {\n        tokenName += (\" \" + props.hintColor + \" hint\")\n    }\n    return (\n        <div className={tokenName}\n             onDragOver={props.onDragOver}\n             onDrop={props.onDrop}>\n            {symbol}\n        </div>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(row, column) {\n        const squares = this.props.squares;\n        const square = squares[row][column];\n        return (\n            <DropTarget\n                targetKey=\"token\"\n                dropData={{'row':row, 'column':column}}\n                key={row + ',' + column}\n            >\n                <Square\n                    shape={square ? square.shape : null}\n                    color={square ? square.color : null}\n                    key={row + ',' + column}\n                    row={row}\n                    column={column}\n                    legalMove = {this.props.legalMoves[row][column]}\n                    hintShape = {this.props.hintShape}\n                    hintColor = {this.props.hintColor}\n                    hints={this.props.hints}\n                />\n            </DropTarget>\n        );\n    }\n\n    createSquares() {\n        let rows = [];\n        for (let row = 0; row < this.props.gridSize; row++) {\n            let squares = [];\n            for (let column = 0; column < this.props.gridSize; column++) {\n                squares.push(this.renderSquare(row, column));\n            }\n            rows.push(<div className=\"board-row\" key={row}>{squares}</div>);\n        }\n        return rows;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.createSquares()}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        let gridSize = 5;\n        let legalMoves = [];\n        for (let rowIndex = 0; rowIndex < gridSize; rowIndex++) {\n            let row = [];\n            for (let columnIndex = 0; columnIndex < gridSize; columnIndex++) {\n                row.push({\n                    'red': {\n                        'star': true,\n                        'circle' : true\n                    },\n                    'blue': {\n                        'star': true,\n                        'circle' : true\n                    }\n                });\n            }\n            legalMoves.push(row);\n        }\n        this.state = {\n            gridSize: gridSize,\n            history: {\n                squares: [Array.from({length: gridSize}, e => Array(gridSize).fill(null))],\n                legalMoves: [legalMoves]\n            },\n            blueIsNext: true,\n            hints: true,\n            hintColor: null,\n            hintShape: null,\n            showRules: false,\n            currentRule: 1,\n        };\n        // todo understand when need to bind\n        this.handleShow = this.handleShow.bind(this);\n        this.handleHide = this.handleHide.bind(this);\n        this.handlePrevious = this.handlePrevious.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handleHintsChange = this.handleHintsChange.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n    }\n\n    handleShow() {\n        this.setState({showRules: true});\n    }\n\n    handleHide() {\n        this.setState({\n            showRules: false,\n            currentStep: 1\n        });\n    }\n\n    handlePrevious() {\n        let currentRule = this.state.currentRule;\n        currentRule =  currentRule - 1;\n        this.setState({currentRule: currentRule});\n    }\n\n    handleNext() {\n        let currentRule = this.state.currentRule;\n        currentRule =  currentRule + 1;\n        this.setState({currentRule: currentRule});\n    }\n\n    handleDragOver = (e, row, column) => {\n        e.preventDefault();\n    }\n\n    handleDrop(e) {\n        const row = e.dropData.row;\n        const column = e.dropData.column;\n        let shape = e.dragData.shape;\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].map(a => {return a.slice()});\n        let color = (this.state.blueIsNext ? \"blue\" : \"red\");\n        let converseShape = (shape === \"star\" ? \"circle\" : \"star\");\n        let converseColor = (this.state.blueIsNext ? \"red\" : \"blue\");\n\n        // If the selected symbol cannot be legally placed in the square, don't allow it\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = JSON.parse(JSON.stringify(legalMovesHistory[legalMovesHistory.length - 1]));\n        if (!(legalMoves[row][column][color][shape])){\n            return;\n        }\n\n        // Update the legal moves (red circle can't be next to blue circle, red star can't be next to blue star)\n        const gridSize = this.state.gridSize;\n        for (let currentRow = row-1; currentRow <= row+1; currentRow++) {\n            for (let currentColumn = column-1; currentColumn <= column+1; currentColumn++) {\n                if (currentRow === row && currentColumn === column) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                    legalMoves[currentRow][currentColumn][converseColor][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][shape] = false;\n                }\n                if (currentRow >=0 && currentColumn >=0 && currentRow < gridSize && currentColumn < gridSize) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                }\n            }\n        }\n\n        // Put a token in the square where the token was dropped\n        squares[row][column] = new Token(color, shape);\n\n        // Update next player color\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", (this.state.blueIsNext ? \"var(--red_color)\" : \"var(--blue_color)\"));\n\n        history.squares = squaresHistory.concat([squares]);\n        history.legalMoves = legalMovesHistory.concat([legalMoves]);\n        this.setState({\n            history: history,\n            blueIsNext: !this.state.blueIsNext,\n            hintColor: null,\n            hintShape: null,\n        });\n    }\n\n    handleMouseDown = (e, shape) => {\n        const color = (this.state.blueIsNext ? \"blue\" : \"red\");\n        this.setState({\n            hintColor: color,\n            hintShape: shape,\n        });\n    };\n\n    handleMouseUp = (e) => {\n        this.setState({\n            hintColor: null,\n            hintShape: null,\n        });\n    };\n\n    handleHintsChange = (event) => {\n        const target = event.target;\n        const value = target.checked;\n        this.setState({\n            hints: value\n        });\n    };\n\n    handleUndo = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.length > 1 ? history.squares.slice(0,-1) : history.squares.slice();\n        const legalMovesHistory = history.legalMoves.length >1 ? history.legalMoves.slice(0,-1) : history.legalMoves.slice();\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory;\n        const blueIsNext = history.squares.length > 1 ? !(this.state.blueIsNext) : true;\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", (blueIsNext ? \"var(--blue_color)\" : \"var(--red_color)\"));\n        this.setState({\n                history: history,\n                blueIsNext: blueIsNext,\n            }\n        )\n    };\n\n    handleNewGame = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice(0,1);\n        const legalMovesHistory = history.legalMoves.slice(0,1);\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory;\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", \"var(--blue_color)\");\n        this.setState({\n                history: history,\n                blueIsNext: true,\n                hintColor: null,\n                hintShape: null,\n            }\n        )\n    };\n\n    render() {\n        const history = this.state.history;\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].slice();\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = legalMovesHistory[legalMovesHistory.length - 1].slice();\n\n        // Black out any squares that nothing can be placed in\n        squares = updateBlackout(squares,legalMoves);\n\n        // If one or both players has no more legal moves, fill in the remaining squares\n        if (isEndgame(legalMoves)) {\n            squares = completeEndgame(squares, legalMoves);\n        }\n\n        // Calculate the score\n        const score = calculateScore(squares);\n        const redScore = score.red;\n        const blueScore = score.blue;\n\n        // If all squares are filled, game over todo\n        // let status = null;\n        // if (allSquaresFilled) {\n        //     status = \"r\"\n        // }\n\n        return (\n            <div className=\"game\">\n                <div className=\"title\">\n                    <h1>Stars and Circles</h1>\n                </div>\n                <div className=\"game-board\">\n                    <Board\n                        squares={squares}\n                        gridSize={this.state.gridSize}\n                        legalMoves={legalMoves}\n                        hintShape={this.state.hintShape}\n                        hintColor={this.state.hintColor}\n                        hints={this.state.hints}\n                    />\n                </div>\n                <div className=\"token-area\">\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'star'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"star\")}\n                    >\n                        <div className=\"token\"\n                             onMouseDown={(e) => this.handleMouseDown(e, \"star\")}\n                             onMouseUp={(e) => this.handleMouseUp(e)}\n                        >X\n                        </div>\n                    </DragDropContainer>\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'circle'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"circle\")}\n                    >\n                        <div className=\"token\"\n                             onMouseDown={(e) => this.handleMouseDown(e, \"circle\")}\n                             onMouseUp={(e) => this.handleMouseUp(e)}\n                        >O\n                        </div>\n                    </DragDropContainer>\n                </div>\n                <div className=\"score\">\n                    Score:\n                    <div className=\"red-score\">\n                        {redScore}\n                    </div>\n                    <div className=\"blue-score\">\n                        {blueScore}\n                    </div>\n                </div>\n                <div className=\"controls\">\n                    <label className={\"hints\"}>\n                        Hints\n                        <input\n                            name=\"hints\"\n                            type=\"checkbox\"\n                            checked={this.state.hints}\n                            onChange={this.handleHintsChange} />\n                    </label>\n                    <button onClick={this.handleUndo}>Undo</button>\n                    <button onClick={this.handleNewGame}>New</button>\n                    <button onClick={this.handleShow}>Rules</button>\n                </div>\n                <div className=\"tutorial\">\n                    <Tutorial\n                        showRules={this.state.showRules}\n                        currentRule={this.state.currentRule}\n                        handleHide={this.handleHide}\n                        handlePrevious={this.handlePrevious}\n                        handleNext={this.handleNext}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\n// ReactDOM.render(<Game />, document.getElementById(\"root\")); todo\nReactDOM.render(\n    (<Game />),\n    document.getElementById('root') || document.createElement('div') // for testing purposes\n);\n\nexport function calculateHorizontalScore(grid) {\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let row in grid) {\n        for (let column = 0; column < grid[0].length - 2; column ++) {\n            let first = grid[row][column];\n            let second = grid[row][column + 1];\n            let third = grid[row][column + 2];\n            if (first && second && third) {\n                if (first.color === second.color && first.color === third.color) {\n                    scores[first.color] += 1;\n                }\n            }\n        }\n    }\n\n    return scores\n}\n\nexport function calculateVerticalScore(grid) {\n    // transpose the grid so that the rows become the columns\n    let vertical = transposeGrid(grid);\n\n    // Calculate the transposed grid score\n    return calculateHorizontalScore(vertical)\n}\n\nexport function transposeGrid(grid) {\n    // transpose the grid so that the rows become the columns\n    return (grid[0].map(function(column, i){\n        return grid.map(function(row){\n            return row[i];\n        });\n    }))\n}\n\nexport function transposeDiagonalFromLeft(grid) {\n    // Shift the grid so that the diagonals from upper left to lower right are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ N, N, 0, 1, 2 ],\n    //   [ N, 3, 4, 5, N ],\n    //   [ 6, 7, 8, N, N ]\n    // ] where N is null\n    let leftShift = [];\n    for (let row in grid) {\n        let prepend = Array(grid[row].length - 1 - row).fill(null);\n        let append = Array(parseInt(row)).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        leftShift.push(newRow);\n    }\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    return transposeGrid(leftShift)\n}\n\nexport function transposeDiagonalFromRight(grid) {\n    // Shift the grid so that the diagonals from upper right to lower left are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ 0, 1, 2, N, N],\n    //   [ N, 3, 4, 5, N],\n    //   [ N, N, 6, 7, 8 ]\n    // ] where N is null\n    let rightShift = [];\n    for (let row in grid) {\n        let prepend = Array(parseInt(row)).fill(null);\n        let append = Array(grid[row].length - 1 - row).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        rightShift.push(newRow);\n    };\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    return transposeGrid(rightShift)\n}\n\nexport function calculateDiagonalFromLeftScore(grid) {\n    let diagonalFromLeft = transposeDiagonalFromLeft(grid);\n    return calculateHorizontalScore(diagonalFromLeft)\n}\n\nexport function calculateDiagonalFromRightScore(grid) {\n    let diagonalFromRight = transposeDiagonalFromRight(grid);\n    return calculateHorizontalScore(diagonalFromRight)\n}\n\nexport function calculateScore(squares) {\n\n    let horizontalScores = calculateHorizontalScore(squares);\n    let verticalScores = calculateVerticalScore(squares);\n    let diagonalFromLeftScores = calculateDiagonalFromLeftScore(squares);\n    let diagonalFromRightScores = calculateDiagonalFromRightScore(squares);\n\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let key in scores) {\n        scores[key]= (\n            horizontalScores[key]\n            + verticalScores[key]\n            + diagonalFromLeftScores[key]\n            + diagonalFromRightScores[key]\n        )\n    }\n\n    return scores;\n}\n\nexport function isEndgame(legalMoves) {\n    let anyLegal = {\n        'red': false,\n        'blue': false\n    };\n    for (let row of legalMoves) {\n        for (let square of row) {\n            for (let key in anyLegal) {\n                if (!anyLegal[key] && (square[key]['star'] || square[key]['circle'])) {\n                    anyLegal[key] = true\n                }\n            }\n        }\n    }\n    // If there are legal moves for BOTH red and blue remaining, return true\n    return !(anyLegal['red'] && anyLegal['blue']);\n}\n\nexport function completeEndgame(squares, legalMoves) {\n    alert(\"No choices left for remaining squares! Empty squares will be filled automatically.\")\n    // Fill in the squares with blue/red as possible\n    let completed_squares = squares.slice();\n    for (let rowIndex in completed_squares) {\n        for (let columnIndex in completed_squares[rowIndex]) {\n            // If the square is unoccupied\n            if (!completed_squares[rowIndex][columnIndex]) {\n                let legalMove = legalMoves[rowIndex][columnIndex];\n                if (legalMove['red']['star'] || legalMove['red']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('red', 'null')\n                }\n                if (legalMove['blue']['star'] || legalMove['blue']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('blue', 'null')\n                }\n            }\n        }\n    }\n    return completed_squares\n}\n\nexport function updateBlackout(squares, legalMoves) {\n    for (let rowIndex in squares) {\n        for (let columnIndex in squares[rowIndex]) {\n            let square = squares[rowIndex][columnIndex];\n            let legal = legalMoves[rowIndex][columnIndex];\n            if (!square && !legal['red']['circle'] && !legal['red']['star'] && !legal['blue']['circle'] && !legal['blue']['star']) {\n                let token = new Token('black', 'null');\n                squares[rowIndex][columnIndex] = token;\n            }\n        }\n    }\n    return squares\n}"],"sourceRoot":""}