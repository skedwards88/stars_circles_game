{"version":3,"sources":["modal.js","rules.js","index.js"],"names":["modalRoot","document","getElementById","Modal","props","element","createElement","appendChild","this","removeChild","createPortal","children","React","Component","Rule1","currentRule","className","Rule2","Rule3","Rule4","PreviousButton","onClick","handlePrevious","NextButton","totalSteps","handleNext","Tutorial","showRules","handleHide","Token","color","shape","Square","tokenName","symbol","hints","hintShape","hintColor","legalMove","onDragOver","onDrop","Board","row","column","square","squares","targetKey","dropData","key","legalMoves","rows","gridSize","push","renderSquare","createSquares","Game","handleDragOver","e","preventDefault","handleMouseDown","state","blueIsNext","setState","handleMouseUp","handleHintsChange","event","value","target","checked","handleUndo","history","squaresHistory","length","slice","legalMovesHistory","getElementsByTagName","style","setProperty","handleNewGame","rowIndex","columnIndex","Array","from","fill","handleShow","bind","currentStep","dragData","map","a","converseShape","converseColor","JSON","parse","stringify","currentRow","currentColumn","concat","updateBlackout","isEndgame","completeEndgame","score","calculateScore","redScore","red","blueScore","blue","handleDrop","onDragStart","onMouseDown","onMouseUp","name","type","onChange","calculateHorizontalScore","grid","scores","first","second","third","calculateVerticalScore","transposeGrid","i","transposeDiagonalFromLeft","leftShift","prepend","append","parseInt","newRow","transposeDiagonalFromRight","rightShift","calculateDiagonalFromLeftScore","calculateDiagonalFromRightScore","horizontalScores","verticalScores","diagonalFromLeftScores","diagonalFromRightScores","anyLegal","alert","completed_squares","legal","token","ReactDOM","render"],"mappings":"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","file":"static/js/main.1cb56c36.chunk.js","sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\n\n// Get the element with the id 'modal' from index.html\nconst modalRoot = document.getElementById( 'modal' );\n\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        // Create a div to render the modal into\n        this.element = document.createElement('div');\n    }\n\n    componentDidMount() {\n        // Append the element into the DOM on mount\n        modalRoot.appendChild(this.element);\n    }\n\n    componentWillUnmount() {\n        // Remove the element from the DOM when on unmount\n        modalRoot.removeChild(this.element);\n    }\n\n    render() {\n        // Use a portal to render the children into the element\n        // (Takes any valid React child (JSX, strings, arrays, etc.) and an element in the DOM\n        return createPortal(\n            this.props.children,\n            this.element,\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n","import React from \"react\";\nimport Modal from \"./modal\";\n\nclass Rule1 extends React.Component {\n    render() {\n        if (this.props.currentRule !== 1) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                <div className=\"tutorial-text\">\n                    Players take turns dragging a symbol (X or O) of their color onto the board.\n                </div>\n                <div className={\"tutorial-board\"}>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square step1_square2\"}>O</div>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square step1_square1\"}>X</div>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square step1_square3\"}>O</div>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray step1_X\"}>X</div>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray step1_O\"}>O</div>\n                        <div className={\"square tray\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Rule2 extends React.Component {\n    render() {\n        if (this.props.currentRule !== 2) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                <div className=\"tutorial-text\">\n                    Matching symbols of opposite color cannot be placed adjacent or diagonal to each other.\n                </div>\n                <div className={\"tutorial-board\"}>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square red\"}>O</div>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square blue\"}>X</div>\n                        <div className={\"square blue\"}>X</div>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray step2_X\"}>X</div>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray red_token\"}>O</div>\n                        <div className={\"square tray\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Rule3 extends React.Component {\n    render() {\n        if (this.props.currentRule !== 3) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                <div className=\"tutorial-text\">\n                    When no symbol can be placed in a square, the square is blacked out.\n                </div>\n                <div className={\"tutorial-board\"}>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square red\"}>X</div>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square blue\"}>O</div>\n                        <div className={\"square black\"}/>\n                        <div className={\"square red\"}>O</div>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square blue\"}>X</div>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                        <div className={\"square\"}/>\n                    </div>\n                    <div className={\"board-row\"}>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray red_token\"}>X</div>\n                        <div className={\"square tray\"}/>\n                        <div className={\"square tray red_token\"}>O</div>\n                        <div className={\"square tray\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Rule4 extends React.Component {\n    render() {\n        if (this.props.currentRule !== 4) {\n            return null\n        }\n        return(\n            <div className=\"tutorialStep\">\n                <div className=\"tutorial-text\">\n                    Score a point by getting a 3-in-a-row of your color (symbol doesn't matter).\n                    <div className={\"tutorial-board\"}>\n                        <div className={\"board-row\"}>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square red step4_score3\"}>O</div>\n                        </div>\n                        <div className={\"board-row\"}>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square red step4_score3\"}>X</div>\n                            <div className={\"square\"}/>\n                        </div>\n                        <div className={\"board-row\"}>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square red step4_score3\"}>O</div>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                        </div>\n                        <div className={\"board-row\"}>\n                            <div className={\"square blue step4_score1\"}>O</div>\n                            <div className={\"square blue step4_score12\"}>X</div>\n                            <div className={\"square blue step4_score12\"}>X</div>\n                            <div className={\"square blue step4_score2\"}>X</div>\n                            <div className={\"square\"}/>\n                        </div>\n                        <div className={\"board-row\"}>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                            <div className={\"square\"}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction PreviousButton(props) {\n    if(props.currentRule !== 1) {\n        return (\n            <button onClick={props.handlePrevious}>Previous</button>\n        )\n    }\n    return <div/>;\n}\n\nfunction NextButton(props) {\n    if(props.currentRule < props.totalSteps) {\n        return (\n            <button onClick={props.handleNext}>Next</button>\n        )\n    }\n    return <div/>;\n}\n\nfunction Tutorial(props) {\n    const totalSteps = 4;\n    if (props.showRules) {\n        return (\n            <Modal>\n                <div className=\"modal\">\n                    <div className=\"tutorial\">\n                        <Rule1\n                            currentRule = {props.currentRule}\n                        />\n                        <Rule2\n                            currentRule = {props.currentRule}\n                        />\n                        <Rule3\n                            currentRule = {props.currentRule}\n                        />\n                        <Rule4\n                            currentRule = {props.currentRule}\n                        />\n                        <div className=\"tutorial-navigation\">\n                            <PreviousButton\n                                currentRule={props.currentRule}\n                                handlePrevious={props.handlePrevious}\n                            />\n                            <div>{props.currentRule}/{totalSteps}</div>\n                            <NextButton\n                                currentRule={props.currentRule}\n                                totalSteps={totalSteps}\n                                handleNext={props.handleNext}\n                            />\n                            <button onClick={props.handleHide}>Exit</button>\n                        </div>\n                    </div>\n                </div>\n            </Modal>\n        );\n    } else {\n        return null;\n    }\n\n}\n\nexport default Tutorial;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './rules.css';\nimport Tutorial from './rules.js';\nimport { DragDropContainer, DropTarget } from 'react-drag-drop-container';\n\n\nclass Token {\n    constructor(color, shape) {\n        this.color = color;\n        this.shape = shape;\n    }\n}\n\nfunction Square(props) {\n    let tokenName = \"square\";\n    let symbol = null;\n    if (props.color) {\n        tokenName += (\" \" + props.color);\n        if (props.shape === 'star') {\n            symbol = 'X';\n        } else if (props.shape === 'circle') {\n            symbol = 'O';\n        }\n    } else if (props.hints && props.hintShape && props.hintColor && props.legalMove[props.hintColor][props.hintShape]) {\n        tokenName += (\" \" + props.hintColor + \" hint\")\n    }\n    return (\n        <div className={tokenName}\n                onDragOver={props.onDragOver}\n                onDrop={props.onDrop}>\n            {symbol}\n        </div>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(row, column) {\n        const squares = this.props.squares;\n        const square = squares[row][column];\n        return (\n            <DropTarget\n                targetKey=\"token\"\n                dropData={{'row':row, 'column':column}}\n                key={row + ',' + column}\n            >\n            <Square\n                shape={square ? square.shape : null}\n                color={square ? square.color : null}\n                key={row + ',' + column}\n                row={row}\n                column={column}\n                legalMove = {this.props.legalMoves[row][column]}\n                hintShape = {this.props.hintShape}\n                hintColor = {this.props.hintColor}\n                hints={this.props.hints}\n            />\n            </DropTarget>\n        );\n    }\n\n    createSquares() {\n        let rows = [];\n        for (let row = 0; row < this.props.gridSize; row++) {\n            let squares = [];\n            for (let column = 0; column < this.props.gridSize; column++) {\n                squares.push(this.renderSquare(row, column));\n            }\n            rows.push(<div className=\"board-row\" key={row}>{squares}</div>);\n        }\n        return rows;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.createSquares()}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        let gridSize = 5;\n        let legalMoves = [];\n        for (let rowIndex = 0; rowIndex < gridSize; rowIndex++) {\n            let row = [];\n            for (let columnIndex = 0; columnIndex < gridSize; columnIndex++) {\n                row.push({\n                    'red': {\n                        'star': true,\n                        'circle' : true\n                    },\n                    'blue': {\n                        'star': true,\n                        'circle' : true\n                    }\n                });\n            }\n            legalMoves.push(row);\n        }\n        this.state = {\n            gridSize: gridSize,\n            history: {\n                squares: [Array.from({length: gridSize}, e => Array(gridSize).fill(null))],\n                legalMoves: [legalMoves]\n            },\n            blueIsNext: true,\n            hints: true,\n            hintColor: null,\n            hintShape: null,\n            showRules: false,\n            currentRule: 1,\n        };\n        // todo understand when need to bind\n        this.handleShow = this.handleShow.bind(this);\n        this.handleHide = this.handleHide.bind(this);\n        this.handlePrevious = this.handlePrevious.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handleHintsChange = this.handleHintsChange.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n    }\n\n    handleShow() {\n        this.setState({showRules: true});\n    }\n\n    handleHide() {\n        this.setState({\n            showRules: false,\n            currentStep: 1\n        });\n    }\n\n    handlePrevious() {\n        let currentRule = this.state.currentRule\n        currentRule =  currentRule - 1;\n        this.setState({currentRule: currentRule});\n    }\n\n    handleNext() {\n        let currentRule = this.state.currentRule;\n        currentRule =  currentRule + 1;\n        this.setState({currentRule: currentRule});\n    }\n\n    handleDragOver = (e, row, column) => {\n        e.preventDefault();\n    }\n\n    handleDrop(e) {\n        const row = e.dropData.row;\n        const column = e.dropData.column;\n        let shape = e.dragData.shape;\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].map(a => {return a.slice()})\n        let color = (this.state.blueIsNext ? \"blue\" : \"red\");\n        let converseShape = (shape === \"star\" ? \"circle\" : \"star\");\n        let converseColor = (this.state.blueIsNext ? \"red\" : \"blue\");\n\n        // If the selected symbol cannot be legally placed in the square, don't allow it\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = JSON.parse(JSON.stringify(legalMovesHistory[legalMovesHistory.length - 1]))\n        if (!(legalMoves[row][column][color][shape])){\n            return;\n        }\n\n        // Update the legal moves (red circle can't be next to blue circle, red star can't be next to blue star)\n        const gridSize = this.state.gridSize;\n        for (let currentRow = row-1; currentRow <= row+1; currentRow++) {\n            for (let currentColumn = column-1; currentColumn <= column+1; currentColumn++) {\n                if (currentRow === row && currentColumn === column) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                    legalMoves[currentRow][currentColumn][converseColor][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][converseShape] = false;\n                    legalMoves[currentRow][currentColumn][color][shape] = false;\n                }\n                if (currentRow >=0 && currentColumn >=0 && currentRow < gridSize && currentColumn < gridSize) {\n                    legalMoves[currentRow][currentColumn][converseColor][shape] = false;\n                }\n            }\n        }\n\n        // Put a token in the square where the token was dropped\n        squares[row][column] = new Token(color, shape);\n\n        // Update next player color\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", (this.state.blueIsNext ? \"var(--red_color)\" : \"var(--blue_color)\"));\n\n        history.squares = squaresHistory.concat([squares])\n        history.legalMoves = legalMovesHistory.concat([legalMoves])\n        this.setState({\n            history: history,\n            blueIsNext: !this.state.blueIsNext,\n            hintColor: null,\n            hintShape: null,\n        });\n    }\n\n    handleMouseDown = (e, shape) => {\n        const color = (this.state.blueIsNext ? \"blue\" : \"red\");\n        this.setState({\n            hintColor: color,\n            hintShape: shape,\n        });\n    }\n\n    handleMouseUp = (e) => {\n        this.setState({\n            hintColor: null,\n            hintShape: null,\n        });\n    }\n\n    handleHintsChange = (event) => {\n        const target = event.target;\n        const value = target.checked;\n        this.setState({\n            hints: value\n        });\n    }\n\n    handleUndo = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.length > 1 ? history.squares.slice(0,-1) : history.squares.slice();\n        const legalMovesHistory = history.legalMoves.length >1 ? history.legalMoves.slice(0,-1) : history.legalMoves.slice();\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory\n        const blueIsNext = history.squares.length > 1 ? !(this.state.blueIsNext) : true;\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", (blueIsNext ? \"var(--blue_color)\" : \"var(--red_color)\"));\n        this.setState({\n                history: history,\n                blueIsNext: blueIsNext,\n            }\n        )\n    }\n\n    handleNewGame = (event) => {\n        let history = this.state.history;\n        const squaresHistory = history.squares.slice(0,1);\n        const legalMovesHistory = history.legalMoves.slice(0,1);\n        history.squares = squaresHistory;\n        history.legalMoves = legalMovesHistory\n        let body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--player_color\", \"var(--blue_color)\");\n        this.setState({\n                history: history,\n                blueIsNext: true,\n                hintColor: null,\n                hintShape: null,\n            }\n        )\n    }\n\n    render() {\n        const history = this.state.history;\n        const squaresHistory = history.squares.slice();\n        let squares = squaresHistory[squaresHistory.length - 1].slice();\n        const legalMovesHistory = history.legalMoves.slice();\n        let legalMoves = legalMovesHistory[legalMovesHistory.length - 1].slice();\n\n        // Black out any squares that nothing can be placed in\n        squares = updateBlackout(squares,legalMoves);\n\n        // If one or both players has no more legal moves, fill in the remaining squares\n        if (isEndgame(legalMoves)) {\n            squares = completeEndgame(squares, legalMoves);\n        }\n\n        // Calculate the score\n        const score = calculateScore(squares);\n        const redScore = score.red;\n        const blueScore = score.blue;\n\n        // If all squares are filled, game over todo\n        // let status = null;\n        // if (allSquaresFilled) {\n        //     status = \"r\"\n        // }\n\n        return (\n            <div className=\"game\">\n                <div className=\"title\">\n                    <h1>Stars and Circles</h1>\n                    <h2>Game by Colin Thom</h2>\n                    <h2>Built by Sarah Edwards</h2>\n                </div>\n                <div className=\"game-board\">\n                    <Board\n                        squares={squares}\n                        gridSize={this.state.gridSize}\n                        legalMoves={legalMoves}\n                        hintShape={this.state.hintShape}\n                        hintColor={this.state.hintColor}\n                        hints={this.state.hints}\n                    />\n                </div>\n                <div className=\"token-area\">\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'star'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"star\")}\n                    >\n                        <div className=\"token\"\n                             onMouseDown={(e) => this.handleMouseDown(e, \"star\")}\n                             onMouseUp={(e) => this.handleMouseUp(e)}\n                        >X\n                        </div>\n                    </DragDropContainer>\n                    <DragDropContainer\n                        targetKey=\"token\"\n                        dragData={{shape:'circle'}}\n                        onDrop={(e) => this.handleDrop(e)}\n                        onDragStart={(e) => this.handleMouseDown(e, \"circle\")}\n                    >\n                        <div className=\"token\"\n                             onMouseDown={(e) => this.handleMouseDown(e, \"circle\")}\n                             onMouseUp={(e) => this.handleMouseUp(e)}\n                        >O\n                        </div>\n                    </DragDropContainer>\n                </div>\n                <div className=\"score\">\n                    Score:\n                    <div className=\"red-score\">\n                        {redScore}\n                    </div>\n                    <div className=\"blue-score\">\n                        {blueScore}\n                    </div>\n                </div>\n                <div className=\"controls\">\n                    <label className={\"hints\"}>\n                        Hints\n                        <input\n                            name=\"hints\"\n                            type=\"checkbox\"\n                            checked={this.state.hints}\n                            onChange={this.handleHintsChange} />\n                    </label>\n                    <button onClick={this.handleUndo}>Undo</button>\n                    <button onClick={this.handleNewGame}>New</button>\n                    <button onClick={this.handleShow}>Rules</button>\n                </div>\n                <div className=\"tutorial\">\n                    <Tutorial\n                        showRules={this.state.showRules}\n                        currentRule={this.state.currentRule}\n                        handleHide={this.handleHide}\n                        handlePrevious={this.handlePrevious}\n                        handleNext={this.handleNext}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\n// ReactDOM.render(<Game />, document.getElementById(\"root\")); todo\nReactDOM.render(\n    (<Game />),\n    document.getElementById('root') || document.createElement('div') // for testing purposes\n);\n\nexport function calculateHorizontalScore(grid) {\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let row in grid) {\n        for (let column = 0; column < grid[0].length - 2; column ++) {\n            let first = grid[row][column];\n            let second = grid[row][column + 1];\n            let third = grid[row][column + 2];\n            if (first && second && third) {\n                if (first.color === second.color && first.color === third.color) {\n                    scores[first.color] += 1;\n                }\n            }\n        }\n    }\n\n    return scores\n}\n\nexport function calculateVerticalScore(grid) {\n    // transpose the grid so that the rows become the columns\n    let vertical = transposeGrid(grid);\n\n    // Calculate the transposed grid score\n    return calculateHorizontalScore(vertical)\n}\n\nexport function transposeGrid(grid) {\n    // transpose the grid so that the rows become the columns\n    return (grid[0].map(function(column, i){\n        return grid.map(function(row){\n            return row[i];\n        });\n    }))\n}\n\nexport function transposeDiagonalFromLeft(grid) {\n    // Shift the grid so that the diagonals from upper left to lower right are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ N, N, 0, 1, 2 ],\n    //   [ N, 3, 4, 5, N ],\n    //   [ 6, 7, 8, N, N ]\n    // ] where N is null\n    let leftShift = [];\n    for (let row in grid) {\n        let prepend = Array(grid[row].length - 1 - row).fill(null);\n        let append = Array(parseInt(row)).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        leftShift.push(newRow);\n    }\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    return transposeGrid(leftShift)\n}\n\nexport function transposeDiagonalFromRight(grid) {\n    // Shift the grid so that the diagonals from upper right to lower left are aligned vertically\n    // Pad the grid with nulls to maintain equal length of each row\n    // [\n    //     [0,1,2],\n    //     [3,4,5],\n    //     [6,7,8]\n    // ] becomes [\n    //   [ 0, 1, 2, N, N],\n    //   [ N, 3, 4, 5, N],\n    //   [ N, N, 6, 7, 8 ]\n    // ] where N is null\n    let rightShift = [];\n    for (let row in grid) {\n        let prepend = Array(parseInt(row)).fill(null);\n        let append = Array(grid[row].length - 1 - row).fill(null);\n        let newRow = prepend.concat(grid[row].concat(append));\n        rightShift.push(newRow);\n    };\n\n    // Transpose the grid so that the verticals become the horizontals\n    // [\n    //     [ N, N, 6 ],\n    //     [ N, 3, 7 ],\n    //     [ 0, 4, 8 ],\n    //     [ 1, 5, N ],\n    //     [ 2, N, N ]\n    //   ]\n    return transposeGrid(rightShift)\n}\n\nexport function calculateDiagonalFromLeftScore(grid) {\n    let diagonalFromLeft = transposeDiagonalFromLeft(grid);\n    return calculateHorizontalScore(diagonalFromLeft)\n}\n\nexport function calculateDiagonalFromRightScore(grid) {\n    let diagonalFromRight = transposeDiagonalFromRight(grid);\n    return calculateHorizontalScore(diagonalFromRight)\n}\n\nexport function calculateScore(squares) {\n\n    let horizontalScores = calculateHorizontalScore(squares);\n    let verticalScores = calculateVerticalScore(squares);\n    let diagonalFromLeftScores = calculateDiagonalFromLeftScore(squares);\n    let diagonalFromRightScores = calculateDiagonalFromRightScore(squares);\n\n    let scores = {\n        'red' : 0,\n        'blue': 0\n    };\n\n    for (let key in scores) {\n        scores[key]= (\n            horizontalScores[key]\n            + verticalScores[key]\n            + diagonalFromLeftScores[key]\n            + diagonalFromRightScores[key]\n        )\n    }\n\n    return scores;\n}\n\nexport function isEndgame(legalMoves) {\n    let anyLegal = {\n        'red': false,\n        'blue': false\n    };\n    for (let row of legalMoves) {\n        for (let square of row) {\n            for (let key in anyLegal) {\n                if (!anyLegal[key] && (square[key]['star'] || square[key]['circle'])) {\n                    anyLegal[key] = true\n                }\n            }\n        }\n    }\n    // If there are legal moves for BOTH red and blue remaining, return true\n    return !(anyLegal['red'] && anyLegal['blue']);\n}\n\nexport function completeEndgame(squares, legalMoves) {\n    alert(\"No choices left for remaining squares! Empty squares will be filled automatically.\")\n    // Fill in the squares with blue/red as possible\n    let completed_squares = squares.slice();\n    for (let rowIndex in completed_squares) {\n        for (let columnIndex in completed_squares[rowIndex]) {\n            // If the square is unoccupied\n            if (!completed_squares[rowIndex][columnIndex]) {\n                let legalMove = legalMoves[rowIndex][columnIndex];\n                if (legalMove['red']['star'] || legalMove['red']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('red', 'null')\n                }\n                if (legalMove['blue']['star'] || legalMove['blue']['circle']) {\n                    completed_squares[rowIndex][columnIndex] = new Token('blue', 'null')\n                }\n            }\n        }\n    }\n    return completed_squares\n}\n\nexport function updateBlackout(squares, legalMoves) {\n    for (let rowIndex in squares) {\n        for (let columnIndex in squares[rowIndex]) {\n            let square = squares[rowIndex][columnIndex];\n            let legal = legalMoves[rowIndex][columnIndex];\n            if (!square && !legal['red']['circle'] && !legal['red']['star'] && !legal['blue']['circle'] && !legal['blue']['star']) {\n                let token = new Token('black', 'null');\n                squares[rowIndex][columnIndex] = token;\n            }\n        }\n    }\n    return squares\n}"],"sourceRoot":""}